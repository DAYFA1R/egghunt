class Player {
    field int x, y, lastX, lastY;
    field boolean facingRight;
    field boolean scaling;

    constructor Player new(int argX, int argY) {
        let x = argX;
        let y = argY;
        let lastX = argX;
        let lastY = argY;
        let facingRight = true;
        let scaling = false;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void render() {
        if (scaling) {
            do SpriteDinoScaling.draw(x, y);
        } else {
            if (facingRight) {
                do SpriteDino.draw(x, y);
            } else {
                do SpriteDinoAlt.draw(x, y);
            }
        }
        return;
    }

    method void clear() {
        do HelperLib.clear(lastX, lastY);
        return;
    }

    method void moveLeft() {
        let scaling = false;
        let facingRight = false;
        if (x > 0) {
            let lastX = x;
            let lastY = y;
            let x = x - 1;
        }
        return;
    }

    method void moveRight() {
        let scaling = false;
        let facingRight = true;
        if ((x + 1) < 32) {
            let lastX = x;
            let lastY = y;
            let x = x + 1;
        }
        return;
    }

    method void moveUp() {
        let scaling = true;
        if (y > 0) {
            let lastX = x;
            let lastY = y;
            let y = y - 1;
        }
        return;
    }

    method void moveDown() {
        let scaling = true;
        if ((y + 1) < 16) {
            let lastX = x;
            let lastY = y;
            let y = y + 1;
        }
        return;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }
}
